<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Data" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ assembly name="System.Xml"#>
<#@ assembly name="System.Xml.Linq"#>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#
    var schema = LoadSchema(this.Host.ResolvePath(@"CASES21 Schema.xml"));
#>
using EduHub.Data.Entities;
using EduHub.Data.SeamlessViews;
using EduHub.Data.WriteBack;
using System;
using System.Collections.Generic;
using System.IO;

namespace EduHub.Data
{
    /// <summary>
    /// eduHub Data Context
    /// </summary>
    public partial class EduHubContext
    {
#region Set Fields
<#
    var isUnscoped = false;
    foreach (EduHubEntity entity in schema.Entities)
    {
        if (entity.IsScoped && isUnscoped) {
            isUnscoped = false;
#>
#endif
<#
        } else if (!entity.IsScoped && !isUnscoped) {
            isUnscoped = true;
#>
#if !EduHubScoped
<#
        }
#>
        private readonly <#=entity.Name#>DataSet _<#=entity.Name#>;
<#
    }
    if (isUnscoped) {
#>
#endif
<#
    }
#>
#endregion

        /// <summary>
        /// Creates an EduHubContextBase
        /// </summary>
        /// <param name="EduHubDirectory">Directory which contains the eduHub CSV Data Sets</param>
        /// <param name="EduHubSiteIdentifier">Data Set Suffix for each CSV file</param>
        /// <exception cref="ArgumentException">eduHub Directory does not exist, has no valid data sets or contains multiple data sets</exception>
        public EduHubContext(string EduHubDirectory, string EduHubSiteIdentifier)
        {
            // Use default directory if none provided
            if (string.IsNullOrWhiteSpace(EduHubDirectory))
            {
                EduHubDirectory = DefaultEduHubDirectory;
            }

            // Use default identifier if none provided
            if (string.IsNullOrWhiteSpace(EduHubSiteIdentifier))
            {
                if (DefaultEduHubSiteIdentifier == null)
                {
                    DefaultEduHubSiteIdentifier = GetSiteIdentifier(EduHubDirectory);
                }
                EduHubSiteIdentifier = DefaultEduHubSiteIdentifier;
            }

            // Ensure directory exists
            if (!Directory.Exists(EduHubDirectory))
                throw new ArgumentException($"EduHub Directory [{EduHubDirectory}] does not exist");

            this.EduHubDirectory = EduHubDirectory;
            this.EduHubSiteIdentifier = EduHubSiteIdentifier;

<#
    isUnscoped = false;
    foreach (EduHubEntity entity in schema.Entities)
    {
        if (entity.IsScoped && isUnscoped) {
            isUnscoped = false;
#>
#endif
<#
        } else if (!entity.IsScoped && !isUnscoped) {
            isUnscoped = true;
#>
#if !EduHubScoped
<#
        }
#>
            _<#=entity.Name#> = new <#=entity.Name#>DataSet(this);
<#
    }
    if (isUnscoped) {
#>
#endif
<#
    }
#>

            SeamlessViews = new SeamlessViewsContext(this);
            WriteBack = new WriteBackContext(this);
        }

        /// <summary>
        /// All EduHub Data Sets
        /// </summary>
        public IEnumerable<IEduHubDataSet> GetDataSets()
        {
<#
    isUnscoped = false;
    foreach (EduHubEntity entity in schema.Entities)
    {
        if (entity.IsScoped && isUnscoped) {
            isUnscoped = false;
#>
#endif
<#
        } else if (!entity.IsScoped && !isUnscoped) {
            isUnscoped = true;
#>
#if !EduHubScoped
<#
        }
#>
            yield return <#=entity.Name#>;
<#
    }
    if (isUnscoped) {
#>
#endif
<#
    }
#>
        }
<#
    isUnscoped = false;
    foreach (EduHubEntity entity in schema.Entities)
    {
        if (entity.IsScoped && isUnscoped) {
            isUnscoped = false;
#>
#endif
<#
        } else if (!entity.IsScoped && !isUnscoped) {
            isUnscoped = true;
#>
#if !EduHubScoped
<#
        }
#>

        /// <summary>
        /// <#=entity.Description#>
        /// </summary>
        public <#=entity.Name#>DataSet <#=entity.Name#> { get { return _<#=entity.Name#>; } }
<#
    }
    if (isUnscoped) {
#>
#endif
<#
    }
#>
    }
}
<#+
    public class EduHubSchema
    {
        public List<EduHubEntity> Entities;
    }

    public class EduHubEntity
    {
        public EduHubSchema Schema;

        public string Name;
        public string Description;
        public bool IsScoped;
    }

    static EduHubSchema LoadSchema(string Filename)
    {
        var schema = new EduHubSchema();

        schema.Entities = XElement.Load(Filename)
            .Elements("Entity")
            .Select(e => new EduHubEntity()
                {
                    Schema = schema,
                    Name = e.Attribute("Name").Value,
                    Description = e.Attribute("Description").Value.Replace("&", "&amp;").Replace("<", "&lt;").Replace(">", "&gt;"),
                    IsScoped = e.Attribute("IsScoped") != null && string.Equals(e.Attribute("IsScoped").Value, "true", StringComparison.Ordinal)
                }).ToList();

        return schema;
    }
#>
